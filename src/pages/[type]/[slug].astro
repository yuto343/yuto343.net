---
import { useConstants } from "../../libs/use-constants";
import { FONT_SIZE, COLOR, SPACING, TIMELINE_TYPES } from "../../constants";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { formatDate } from "../../libs/date";
import Layout from "../../layouts/base-layout.astro";
import Draft from "../../components/event/draft.astro";

export async function getStaticPaths() {
  const eventCollection = await getCollection("event");
  const careerCollection = await getCollection("career");
  const developmentCollection = await getCollection("development");
  const writingCollection = await getCollection("writing");

  let events: Array<
    | CollectionEntry<"career">
    | CollectionEntry<"development">
    | CollectionEntry<"event">
    | CollectionEntry<"writing">
  > = [
    ...eventCollection,
    ...careerCollection,
    ...developmentCollection,
    ...writingCollection,
  ];
  return events.map((event) => ({
    params: { slug: event.slug, type: event.collection },
    props: { event },
  }));
}
interface Props {
  event: CollectionEntry<"event">;
}

const { event } = Astro.props;
const { Content } = await event.render();
const category = TIMELINE_TYPES.find(
  (type) => type.slug === event.collection
);
---

<Layout>
  <div>
    {
      event.data.draft ? (
        <Draft />
      ) : (
        <>
          <div>
            <h1>{event.data.title}</h1>

            <time>{formatDate(event.data.date)}</time>
            {event.data.at && <p>{event.data.at}</p>}
          </div>
          <div class='contentContainer'>
            <Content />
          </div>
          <div class="footer">
            <span>Thanks for reading!</span>
            <a href={`/${category?.slug}`}>{category?.title}一覧に戻る</a>
            <a href="/">一覧に戻る</a>
          </div>
       </>
      )
    }
  </div>
</Layout>

<style define:vars={useConstants({ FONT_SIZE, COLOR, SPACING })}>
  time {
    font-size: var(--FONT_SIZE_PX12);
    text-align: center;
    display: block;
    color: var(--COLOR_GRAY600);
  }
  h1 {
    font-size: var(--FONT_SIZE_PX20);
    font-weight: normal;
    text-align: center;
    margin: 0;
  }

  p {
    color: var(--COLOR_GRAY600);
    text-align: center;
    margin: 0;
    font-size: var(--FONT_SIZE_PX12);
  }
  .contentContainer {
    width: 90%;
    max-width: 600px;
    margin: 0 auto;
  }

  
  .contentContainer :global(a) {
    color: var(--COLOR_GRAY600);
  }
  .contentContainer :global(a:visited) {
    color: var(--COLOR_GRAY600);
  }
  .contentContainer :global(a:hover) {
    color: var(--COLOR_GRAY500);
  }
  .contentContainer :global(img) {
    max-width: 100%;
    object-fit: contain;
  }
  .footer {
    margin: var(--SPACING_PX32) 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap:var(--SPACING_PX12);
  }
  .footer > a {
    color:var(--COLOR_GRAY600)
  }
</style>
